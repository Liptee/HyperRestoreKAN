import subprocess
import os
from lightning.pytorch.callbacks import Callback
from lightning import LightningModule, Trainer
from typing import Dict, Any


class TelegramNotificationCallback(Callback):
    """
    Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
    –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–∏ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç push.sh
    """
    
    def __init__(self, script_path: str = "push.sh", every_n_epochs: int = 1) -> None:
        """
        Args:
            script_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É push.sh (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º)
            every_n_epochs: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ N —ç–ø–æ—Ö
        """
        super().__init__()
        self.every_n_epochs = every_n_epochs
        
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –∏—â–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        if not os.path.isabs(script_path):
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if os.path.exists(script_path):
                self.script_path = os.path.abspath(script_path)
            else:
                # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)
                current_dir = os.path.dirname(os.path.abspath(__file__))
                project_root = os.path.join(current_dir, "..", "..", "..")
                project_root = os.path.normpath(project_root)
                potential_path = os.path.join(project_root, script_path)
                
                if os.path.exists(potential_path):
                    self.script_path = os.path.abspath(potential_path)
                else:
                    raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –Ω–∏ –≤ {project_root}")
        else:
            self.script_path = script_path
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self.script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç {self.script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(self.script_path, 0o755)
        print(f"üì± TelegramNotificationCallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–ø—Ç {self.script_path}")
    
    def on_train_epoch_end(self, trainer: Trainer, pl_module: LightningModule) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è"""
        if trainer.current_epoch % self.every_n_epochs == 0:
            self._send_notification(trainer, pl_module, "train")
    
    def on_validation_epoch_end(self, trainer: Trainer, pl_module: LightningModule) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        if trainer.current_epoch % self.every_n_epochs == 0:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ª–æ–≥–≥–µ—Ä–∞
            metrics = self._get_metrics(trainer)
            if metrics:
                self._send_metrics_notification(trainer, metrics, "validation")
    
    def on_train_start(self, trainer: Trainer, pl_module: LightningModule) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è"""
        experiment_name = getattr(trainer.logger, 'save_dir', 'Unknown')
        message = f"üöÄ –ù–∞—á–∞—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\\nüìÅ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {os.path.basename(experiment_name)}\\nüìä –≠–ø–æ—Ö: {trainer.max_epochs}"
        self._send_message(message)
    
    def on_train_end(self, trainer: Trainer, pl_module: LightningModule) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
        experiment_name = getattr(trainer.logger, 'save_dir', 'Unknown')
        message = f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\\nüìÅ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {os.path.basename(experiment_name)}\\nüèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–ø–æ—Ö–∞: {trainer.current_epoch}"
        self._send_message(message)
    
    def _get_metrics(self, trainer: Trainer) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ª–æ–≥–≥–µ—Ä–∞"""
        metrics = {}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ callback_metrics
        if hasattr(trainer, 'callback_metrics') and trainer.callback_metrics:
            for key, value in trainer.callback_metrics.items():
                if hasattr(value, 'item'):
                    metrics[key] = value.item()
                else:
                    metrics[key] = value
        
        # –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ logged_metrics
        if hasattr(trainer, 'logged_metrics') and trainer.logged_metrics:
            for key, value in trainer.logged_metrics.items():
                if hasattr(value, 'item'):
                    metrics[key] = value.item()
                else:
                    metrics[key] = value
        
        return metrics
    
    def _send_notification(self, trainer: Trainer, pl_module: LightningModule, stage: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        metrics = self._get_metrics(trainer)
        self._send_metrics_notification(trainer, metrics, stage)
    
    def _send_metrics_notification(self, trainer: Trainer, metrics: Dict[str, Any], stage: str):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        experiment_name = getattr(trainer.logger, 'save_dir', 'Unknown')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [
            f"üìà –≠–ø–æ—Ö–∞ {trainer.current_epoch + 1}/{trainer.max_epochs} ({stage})",
            f"üìÅ {os.path.basename(experiment_name)}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if metrics:
            message_lines.append("üìä –ú–µ—Ç—Ä–∏–∫–∏:")
            for key, value in metrics.items():
                if isinstance(value, float):
                    message_lines.append(f"  ‚Ä¢ {key}: {value:.6f}")
                else:
                    message_lines.append(f"  ‚Ä¢ {key}: {value}")
        else:
            message_lines.append("üìä –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = (trainer.current_epoch + 1) / trainer.max_epochs
        progress_bar_length = 20
        filled_length = int(progress_bar_length * progress)
        bar = "‚ñà" * filled_length + "‚ñë" * (progress_bar_length - filled_length)
        percentage = progress * 100
        message_lines.append(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {percentage:.1f}%")
        
        message = "\\n".join(message_lines)
        self._send_message(message)
    
    def _send_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç push.sh"""
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è bash
            escaped_message = message.replace('"', '\\"').replace('`', '\\`').replace('$', '\\$')
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(
                [self.script_path, escaped_message],
                capture_output=True,
                text=True,
                cwd=os.path.dirname(os.path.abspath(self.script_path)) or "."
            )
            
            if result.returncode != 0:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {result.stderr}")
            else:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
